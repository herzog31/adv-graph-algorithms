{ 
  "name": "en",
  "fields" : {
    "algorithm_btn_prev": "__EN__ Zurück",
    "algorithm_btn_next": "__EN__ Nächster Schritt",
    "algorithm_btn_frwd": "__EN__ Vorspulen",
    "algorithm_btn_paus": "__EN__ Pause",
    "algorithm_msg_finish": "__EN__ Was nun?",
    "algorithm_msg_test": "__EN__ Forschungsaufgaben ausprobieren:",
    "algorithm_btn_more": "__EN__ Beschreibung des Algorithmus lesen",
    "algorithm_btn_exe1": "__EN__ Wie würde der Algorithmus entscheiden?",
    "algorithm_btn_exe2": "__EN__ Algorithmus am gerichteten Graphen",

    "algorithm_legende": "__EN__ Legende",
    "algorithm_legende_node": "__EN__ Knoten",
    "algorithm_legende_undirectededge": "__EN__ Ungerichtete Kante",
    "algorithm_legende_degree2": "__EN__ Knoten mit geradem Grad 2",
    "algorithm_legende_degree3": "__EN__ Knoten mit ungeradem Grad 3",
    "algorithm_legende_start": "__EN__ Aktueller Knoten",
    "algorithm_legende_start2": "__EN__ Startknoten",
    "algorithm_legende_edgecolor": "__EN__ Kante der Eulertour im aktuellen Durchgang",

    "algorithm_status1_head": "__EN__ Initialisierung",
    "algorithm_status1_desc": "__EN__ Der Algorithmus muss bei der Ausführung prüfen können, welche Kanten er schon besucht hat. Dazu markieren wir jede Kante als unbesucht.",

    "algorithm_status2_head": "__EN__ Graph prüfen",
    "algorithm_status2_desc1": "__EN__ Nur wenn unser Graph die folgenden Eigenschaften aufweist, kann der Hierholzer Algorithmus angewendet werden:",
    "algorithm_status2_desc2": "__EN__ mind. eine Kante",
    "algorithm_status2_desc3": "__EN__ zusammenhängend",
    "algorithm_status2_desc4": "__EN__ eulersch oder semi-eulersch",
    "algorithm_status2_desc5": "__EN__ Alle Knoten haben einen geraden Grad oder<br />genau zwei Knoten haben einen ungeraden Grad.",
    "algorithm_status2_desc6": "__EN__ Dein Graph erfüllt mindestens eine der folgenden Eigenschaften nicht:",

    "algorithm_status3_head": "__EN__ Subtour bestimmen",
    "algorithm_status31A_head": "__EN__ Ersten Startknoten finden",
    "algorithm_status31A_desc1": "__EN__ Für die erste Subtour benötigt der Algorithmus einen Startknoten:",
    "algorithm_status31A_desc2": "__EN__ Für <strong>eulersche Graphen</strong> kann man einen beliebigen Knoten wählen.",
    "algorithm_status31A_desc3": "__EN__ Für <strong>semi-eulersche Graphen</strong> wählt man einen der beiden Knoten mit ungeradem Grad.",
    "algorithm_status31A_desc4": "__EN__ Der der Algorithmus hat bereits einen zufälligen Knoten ausgewählt und <span style=\"font-weight: bold; color: #00c532;\">hellgrün</span> markiert. <strong>Alternativ kannst du selbst einen Startknoten durch Klick auf einen beliebigen Knoten aussuchen.</strong>",
    "algorithm_status31A_desc5": "__EN__ Der vom Algorithmus ausgewählte Knoten wurde <span style=\"font-weight: bold; color: #00c532;\">hellgrün</span> markiert.",

    "algorithm_status31B_head": "__EN__ Neuen Startknoten finden",
    "algorithm_status31B_desc1": "__EN__ Als Startknoten der nächsten Subtour wählt der Algorithmus einen beliebigen Knoten, der unbesuchte Kanten besitzt.",
    "algorithm_status31B_desc2": "__EN__ Dieser Knoten wurde <span style=\"font-weight: bold; color: green;\">grün</span> markiert.",

    "algorithm_status32_head": "__EN__ Unbesuchten Nachbarn finden",
    "algorithm_status32_desc1": "__EN__ Für die nächste Kante unserer aktuellen Tour betrachtet der Algorithmus alle unbesuchten Kanten des aktiven Knotens (<span style=\"font-weight: bold; color: green;\">grün</span>).",
    "algorithm_status32_desc2": "__EN__ Aus dieser Kantenmenge wählt der Algorithmus nun eine zufällige Kante ",
    "algorithm_status32_desc3": "__EN__ farblich markiert",
    "algorithm_status32_desc4": "__EN__  aus.",
    "algorithm_status32_desc5": "__EN__ Wir fügen diese Kante zu unserer Subtour hinzu und markieren sie als besucht. Der Knoten am anderen Ende der Kante wir nun der neue aktive Knoten.",
    
    "algorithm_status33_head": "__EN__ Auf Kreis prüfen",
    "algorithm_status33_desc1": "__EN__ Um zu prüfen, ob unsere Subtour abgeschlossen ist, vergleichen wir den aktiven Knoten mit dem ersten Knoten der Subtour. Beide sind <span style=\"font-weight: bold; color: green;\">grün</span> markiert.",
    "algorithm_status33_desc2": "__EN__ Abgeschlossen",
    "algorithm_status33_desc3": "__EN__ Die Subtour ist abgeschlossen und wir fahren mit <em>Schritt 4</em> fort.",
    "algorithm_status33_desc4": "__EN__ Nicht abgeschlossen",
    "algorithm_status33_desc5": "__EN__ Die Subtour ist unvollständig und wir wiederholen <em>Schritt 3.2</em>.",

    "algorithm_status4_head": "__EN__ Gesamttour bestimmen",
    "algorithm_status41_head": "__EN__ Integriere Subtour in Gesamttour",
    "algorithm_status41_desc1": "__EN__ Die Subtour ist abgeschlossen und muss in die Gesamttour integriert werden.",
    "algorithm_status41_desc2": "__EN__ Zyklische Subtour",
    "algorithm_status41_desc3": "__EN__ Der Algorithmus ersetzt Start- & Endknoten der Subtour in der Gesamttour mit der gesamten Subtour.",
    "algorithm_status41_desc4": "__EN__ Azyklischer Subweg",
    "algorithm_status41_desc5": "__EN__ Es handelt sich hierbei um den Subweg im semi-eulerschen Graph, der mit einem Knoten ungeraden Grads beginnt und bei dem zweiten Knoten mit ungeradem Grad endet. Der Weg muss so integriert werden, dass er am Anfang oder Ende der Gesamttour steht.",
    
    "algorithm_status42_head": "__EN__ Auf Vollständigkeit prüfen",
    "algorithm_status42_desc1": "__EN__ Nach jeder Integration einer Subtour in die Gesamttour prüft der Algorithmus ob die Gesamttour eine Eulertour bzw. ein Eulerweg ist.",
    "algorithm_status42_desc2": "__EN__ ",
    "algorithm_status42_desc3": "__EN__ Bei Gleichheit terminiert der Algorithmus und gibt die Gesamttour in <em>Schritt 5</em> zurück.",
    "algorithm_status42_desc4": "__EN__ Bei Ungleichheit existiert mindestens eine weitere Subtour, die gefunden werden muss. Wir springen zurück zu <em>Schritt 3</em>.",

    "algorithm_status5_head": "__EN__ Ergebnis",
    "algorithm_status5_desc1a": "__EN__ Der Algorithmus konnte erfolgreich einen Eulerweg bestimmen.",
    "algorithm_status5_desc1b": "__EN__ Der Algorithmus konnte erfolgreich eine Eulertour bestimmen.",

    "algorithm_status51a_head": "__EN__ Eulerweg",
    "algorithm_status51a_desc1": "__EN__ Der Eulerweg wird hier als Folge von Knoten dargestellt.",
    "algorithm_status51a_desc2": "__EN__ Animiere Eulerweg",
    "algorithm_status51a_desc3": "__EN__ Stop",
    "algorithm_status51a_desc4": "__EN__ Klicke auf <strong>Animiere Eulerweg</strong> um den kompletten Eulerweg abzulaufen und alle Knoten und Kanten auf dem Weg hervorzuheben.",
    
    "algorithm_status51b_head": "__EN__ Eulertour",
    "algorithm_status51b_desc1": "__EN__ Die Eulertour wird hier als Folge von Knoten dargestellt.",
    "algorithm_status51b_desc2": "__EN__ Animiere Eulertour",
    "algorithm_status51b_desc3": "__EN__ Stop",
    "algorithm_status51b_desc4": "__EN__ Klicke auf <strong>Animiere Eulertour</strong> um die komplette Eulertour abzulaufen und alle Knoten und Kanten auf dem Weg hervorzuheben.",

    "algorithm_status52_head": "__EN__ Subtouren",
    "algorithm_status52_desc1": "__EN__ Bewege deinen Mauszeiger über eine der Subtouren, um sie im Graph hervorzuheben.",

    "aufgabe1_btn_next_question": "__EN__ Zur nächsten Frage vorspulen",
    "aufgabe1_graph_invalid": "__EN__ Graph ungültig",
    "aufgabe1_check_euleriantour": "__EN__ Gesamttour auf Vollständigkeit prüfen",
    "aufgabe1_showresults": "__EN__ Ergebnis zeigen",

    "aufgabe1_qst": "__EN__ Frage",
    "aufgabe1_qst_solution": "__EN__ Lösung",
    "aufgabe1_qst_answer": "__EN__ Antworten",
    "aufgabe1_qst_close": "__EN__ Schließen",
    "aufgabe1_qst_correct": "__EN__ korrekt",
    "aufgabe1_qst_wrong": "__EN__ falsch",
    "aufgabe1_qst_correctanswer": "__EN__ Die korrekte Antwort ist: ",
    "aufgabe1_qst_continue": "__EN__ Weiter",
    "aufgabe1_qst_degree1": "__EN__ Welchen Grad hat der Knoten ",
    "aufgabe1_qst_nextstep1": "__EN__ Welchen Schritt macht der Algorithmus als nächstes?",
    "aufgabe1_qst_subtour1": "__EN__ Welche Knoten befinden sich der der aktuellen ",
    "aufgabe1_qst_subtour2": "__EN__ Subtour",
    "aufgabe1_qst_subtour3": "__EN__ Antworte in der Form <em>x,y,z</em> und beachte die Reihenfolge.",
    "aufgabe1_qst_tour1": "__EN__ In diesem Schritt wird die Subtour ",
    "aufgabe1_qst_tour2": "__EN__  in die Gesamttour ",
    "aufgabe1_qst_tour3": "__EN__  integriert. Wie sieht das Ergebnis aus?",
    "aufgabe1_qst_tour4": "__EN__ Hinweis: Es gibt u.U. mehrere Lösungsmöglichkeiten, es ist allerdings nur eine der gegebenen Antwortmöglichkeit korrekt.",
    "aufgabe1_qst_solution1": "__EN__ Von insgesamt ",
    "aufgabe1_qst_solution2": "__EN__  Fragen hast du ",
    "aufgabe1_qst_solution3": "__EN__  richtig beantwortet!",

    "aufgabe1_status0": "__EN__ Graph initialisieren.",
    "aufgabe1_status1": "__EN__ Prüfen ob der Graph gültig ist.",
    "aufgabe1_status2": "__EN__ Den Graph als ungültig markieren und abbrechen.",
    "aufgabe1_status3": "__EN__ Den ersten Startknoten bestimmen.",
    "aufgabe1_status4": "__EN__ Einen unbesuchten Nachbar für die Subtour finden.",
    "aufgabe1_status5": "__EN__ Prüfen ob die Subtour abgeschlossen ist.",
    "aufgabe1_status6": "__EN__ Subtour in die Gesamttour integrieren.",
    "aufgabe1_status7": "__EN__ Prüfen ob Gesamttour eine Eulertour ist.",
    "aufgabe1_status8": "__EN__ Fertige Eulertour anzeigen.",
    "aufgabe1_status9": "__EN__ Startknoten für die nächste Subtour bestimmen.",

    "aufgabe1_statuspast0": "__EN__ Der Graph wurde initialisiert.",
    "aufgabe1_statuspast1": "__EN__ Der Graph wurde geprüft und für gültig befunden.",
    "aufgabe1_statuspast2": "__EN__ Der Graph wurde als ungültig markiert.",
    "aufgabe1_statuspast3": "__EN__ Der erste Startknoten wurde bestimmt.",
    "aufgabe1_statuspast4": "__EN__ Es wurde ein unbesuchter Nachbar für die Subtour gefunden.",
    "aufgabe1_statuspast5": "__EN__ Es wurde geprüft ob die Subtour abgeschlossen ist.",
    "aufgabe1_statuspast6": "__EN__ Die Subtour wurde in die Gesamttour integriert.",
    "aufgabe1_statuspast7": "__EN__ Es wurde geprüft ob die Gesamttour eine Eulertour ist.",
    "aufgabe1_statuspast8": "__EN__ Es wurde die fertige Eulertour angezeigt.",
    "aufgabe1_statuspast9": "__EN__ Es wurde ein neuer Startknoten für eine weitere Subtour bestimmt.",

    "aufgabe2_status1_desc": "__EN__ Der Algorithmus muss bei der Ausführung prüfen können, welche Kanten er schon besucht hat. Dazu markieren wir jede Kante als unbesucht.",

    "aufgabe2_status2_desc1": "__EN__ Damit der Hierholzer auf einem gerichteten Graphen funktioniert, muss dieser folgende Eigenschaften erfüllen:",
    "aufgabe2_status2_desc2": "__EN__ mind. eine Kante",
    "aufgabe2_status2_desc3": "__EN__ schwach zusammenhängend",
    "aufgabe2_status2_desc4": "__EN__ Man muss von jedem Knoten aus zu jedem anderen Knoten gelangen können, wobei man jede Kante als ungerichtet betrachtet. Wenn der Graph eulersch ist, schließt das diese Bedingung mit ein.",
    "aufgabe2_status2_desc5": "__EN__ eulersch oder semi-eulersch",
    "aufgabe2_status2_desc6": "__EN__ Diese Voraussetzungen ist <em>strenger</em> als im ungerichteten Fall. Der Grad der Knoten muss gerade sein, zusätzlich muss die Anzahl der eingehenden Kanten mit der Anzahl ausgender Kanten übereinstimmen.<br />Im Falle eine semi-eulerschen dürfen genau ein Knoten eine zusätzliche ausgehende Kante und genau ein anderer Knoten eine zusätzliche eingehende Kante besitzen.",
    "aufgabe2_status2_desc7": "__EN__ Dein Graph erfüllt mindestens eine der folgenden Eigenschaften nicht:",

    "aufgabe2_status31A_desc1": "__EN__ Für die erste Subtour benötigt der Algorithmus einen Startknoten:",
    "aufgabe2_status31A_desc2": "__EN__ Für <strong>eulersche Graphen</strong> kann man einen beliebigen Knoten wählen.",
    "aufgabe2_status31A_desc3": "__EN__ Für <strong>semi-eulersche Graphen</strong> wählt man <em>genau den Knoten, der mehr ausgehende Kanten besitzt als eingehende</em>.",
    "aufgabe2_status31A_desc4": "__EN__ Der der Algorithmus hat bereits einen zufälligen Knoten ausgewählt und <span style=\"font-weight: bold; color: #00c532;\">hellgrün</span> markiert. <strong>Alternativ kannst du selbst einen Startknoten durch Klick auf einen beliebigen Knoten aussuchen.</strong>",

    "aufgabe2_status32_desc1": "__EN__ Für die nächste Kante unserer aktuellen Tour betrachtet der Algorithmus alle unbesuchten <em>ausgehenden</em> Kanten des aktiven Knotens (<span style=\"font-weight: bold; color: green;\">grün</span>).",
    "aufgabe2_status32_desc2": "__EN__ Aus dieser Kantenmenge wählt der Algorithmus nun eine zufällige Kante ",
    "aufgabe2_status32_desc3": "__EN__ farblich markiert",
    "aufgabe2_status32_desc4": "__EN__  aus.",
    "aufgabe2_status32_desc5": "__EN__ Wir fügen diese Kante zu unserer Subtour hinzu und markieren sie als besucht. Der Knoten am anderen Ende der Kante wir nun der neue aktive Knoten.",
    

    "aufgabe2_status33_desc1": "__EN__ Um zu prüfen, ob unsere Subtour abgeschlossen ist, vergleichen wir den aktiven Knoten mit dem ersten Knoten der Subtour. Beide sind <span style=\"font-weight: bold; color: green;\">grün</span> markiert.",
    "aufgabe2_status33_desc2": "__EN__ Abgeschlossen",
    "aufgabe2_status33_desc3": "__EN__ Handelt es sich bei beiden um den selben Knoten, ist unsere Subtour abgeschlossen und wir fahren mit <em>Schritt 4</em> fort.",
    "aufgabe2_status33_desc4": "__EN__ Nicht abgeschlossen",
    "aufgabe2_status33_desc5": "__EN__ Handelt es sich um zwei verschiedene Knoten, ist unsere Subtour unvollständig und wir wiederholen <em>Schritt 3.2</em>.",

    "aufgabe2_status41_desc1": "__EN__ Die Subtour ist abgeschlossen und muss in die Gesamttour integriert werden.",
    "aufgabe2_status41_desc2": "__EN__ Zyklische Subtour",
    "aufgabe2_status41_desc3": "__EN__ Der Algorithmus ersetzt Start- & Endknoten der Subtour in der Gesamttour mit der gesamten Subtour.",
    "aufgabe2_status41_desc4": "__EN__ Azyklischer Subweg",
    "aufgabe2_status41_desc5": "__EN__ Es handelt sich hierbei um den Subweg im semi-eulerschen Graph, der mit dem Knoten mit einer zusätzlichen ausgehenden Kante beginnt und in den Knoten mit zusätzlicher eingehenden Kante mündet. Der Weg muss so integriert werden, dass er am Anfang oder Ende der Gesamttour steht.",

    "aufgabe2_status42_desc1": "__EN__ Nach jeder Integration einer Subtour in die Gesamttour prüft der Algorithmus ob die Gesamttour eine Eulertour bzw. ein Eulerweg ist.",
    "aufgabe2_status42_desc2": "__EN__ ",
    "aufgabe2_status42_desc3": "__EN__ Bei Gleichheit terminiert der Algorithmus und gibt die Gesamttour in <em>Schritt 5</em> zurück.",
    "aufgabe2_status42_desc4": "__EN__ Bei Ungleichheit existiert mindestens eine weitere Subtour, die gefunden werden muss. Wir springen zurück zu <em>Schritt 3</em>.",

    "aufgabe2_status5_desc1a": "__EN__ Der Algorithmus konnte erfolgreich einen Eulerweg bestimmen.",
    "aufgabe2_status5_desc1b": "__EN__ Der Algorithmus konnte erfolgreich eine Eulertour bestimmen.",

    "aufgabe2_status51a_desc1": "__EN__ Der Eulerweg wird hier als Folge von Knoten dargestellt.",
    "aufgabe2_status51a_desc2": "__EN__ Animiere Eulerweg",
    "aufgabe2_status51a_desc3": "__EN__ Stop",
    "aufgabe2_status51a_desc4": "__EN__ Klicke auf <strong>Animiere Eulerweg</strong> um den kompletten Eulerweg abzulaufen und alle Knoten und Kanten auf dem Weg hervorzuheben.",
   
    "aufgabe2_status51b_desc1": "__EN__ Die Eulertour wird hier als Folge von Knoten dargestellt.",
    "aufgabe2_status51b_desc2": "__EN__ Animiere Eulertour",
    "aufgabe2_status51b_desc3": "__EN__ Stop",
    "aufgabe2_status51b_desc4": "__EN__ Klicke auf <strong>Animiere Eulertour</strong> um die komplette Eulertour abzulaufen und alle Knoten und Kanten auf dem Weg hervorzuheben.",

    "aufgabe2_status52_desc1": "__EN__ Bewege deinen Mauszeiger über eine der Subtouren, um sie im Graph hervorzuheben.",

    "aufgabe2_status31B_desc1": "__EN__ Als Startknoten der nächsten Subtour wählt der Algorithmus einen beliebigen Knoten, der unbesuchte <em>ausgehende</em> Kanten besitzt.",
    "aufgabe2_status31B_desc2": "__EN__ Dieser Knoten wurde <span style=\"font-weight: bold; color: green;\">grün</span> markiert.",

    "aufgabe2_legende_ingradausgrad": "__EN__ Knoten mit Ingrad gleich Ausgrad",
    "aufgabe2_legende_ingradgausgrad": "__EN__ Knoten mit Ingrad größer Ausgrad",

    "aufgabe2_qst1_1": "__EN__ Welche Voraussetzungen muss dieser gerichtete Graph erfüllen, damit der Algorithmus eine Eulertour finden kann?",
    "aufgabe2_qst1_2": "__EN__ <em>Die Antworten schließen auch implizierte Voraussetzungen ein!</em>",
    "aufgabe2_qst2_1": "__EN__ Welche(n) Nachbarn von ",
    "aufgabe2_qst2_2": "__EN__  kommen für den Algorithmus im nächsten Schritt potentiell in Frage?",

    "aufgabe2_qst1_solution1": "__EN__  müssen betrachtet werden.",
    "aufgabe2_qst1_solution2": "__EN__  muss betrachtet werden.",

    "aufgabe2_reqcorrect0": "__EN__ schwach zusammenhängend",
    "aufgabe2_reqcorrect1": "__EN__ Ingrad gleich Ausgrad",
    "aufgabe2_reqcorrect2": "__EN__ Graph besitzt mindestens einen Kreis",
    "aufgabe2_reqcorrect3": "__EN__ Knotengrade sind gerade",

    "aufgabe2_reqwrong0": "__EN__ Graph ist kreisfrei",
    "aufgabe2_reqwrong1": "__EN__ Keine negativen Kantengewichte",
    "aufgabe2_reqwrong2": "__EN__ Ingrad größer Ausgrad",
    "aufgabe2_reqwrong3": "__EN__ Ingrad kleiner Ausgrad"
 
  }
}
